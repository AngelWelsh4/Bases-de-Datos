mysql> /*
   /*> Práctica 06-Equipo11
   /*> */
mysql> # Ejercicio 0
mysql> # 0.1
mysql> PROMPT \Y E Q U I P O 11 (\d)\S
PROMPT set to '\Y E Q U I P O 11 (\d)\S'
2023 E Q U I P O 11 ((none));
2023 E Q U I P O 11 ((none));# Ejercicio 1
2023 E Q U I P O 11 ((none));# 1.1
2023 E Q U I P O 11 ((none));USE hostal;
Database changed
2023 E Q U I P O 11 (hostal);SELECT CONCAT('Tipo ', id_tipo_empleado) AS 'Tipo empleado', FORMAT(COUNT(id_empleado), 0) AS 'Número de empleados' 
    -> FROM empleado 
    -> GROUP BY 1 
    -> HAVING COUNT(id_empleado)>=5 
    -> ORDER BY 2 DESC;
+---------------+----------------------+
| Tipo empleado | Número de empleados  |
+---------------+----------------------+
| Tipo 2        | 9                    |
| Tipo 3        | 8                    |
| Tipo 6        | 8                    |
| Tipo 7        | 8                    |
| Tipo 4        | 7                    |
| Tipo 5        | 6                    |
+---------------+----------------------+
6 rows in set (0.00 sec)

2023 E Q U I P O 11 (hostal);# 1.2
2023 E Q U I P O 11 (hostal);SELECT UCASE(SUBSTRING(apellido, 1, 1)) AS 'Letra', COUNT(id_cliente) AS 'Total de clientes cuyo apellido empieza con esa letra'
    -> FROM cliente 
    -> GROUP BY 1 
    -> ORDER BY 2 DESC;
+-------+-------------------------------------------------------+
| Letra | Total de clientes cuyo apellido empieza con esa letra |
+-------+-------------------------------------------------------+
| M     |                                                     9 |
| C     |                                                     7 |
| R     |                                                     6 |
| G     |                                                     6 |
| F     |                                                     6 |
| L     |                                                     5 |
| A     |                                                     5 |
| Z     |                                                     3 |
| P     |                                                     2 |
| S     |                                                     1 |
+-------+-------------------------------------------------------+
10 rows in set (0.00 sec)

2023 E Q U I P O 11 (hostal);# 1.3
2023 E Q U I P O 11 (hostal);SELECT CONCAT('Tipo ', id_tipo_habitacion) AS 'Tipo de habitación', CONCAT(COUNT(id_habitacion), ' habitaciones') AS 'Número de habitaciones' 
    -> FROM habitacion 
    -> GROUP BY 1 
    -> HAVING COUNT(id_habitacion)=
    -> 	(SELECT MAX(Numero) 
    -> 		FROM (SELECT id_tipo_habitacion AS Tipo, COUNT(id_habitacion) AS Numero 
    -> 				FROM habitacion GROUP BY 1
    -> 				) AS subconsulta
    -> 	);
+---------------------+-------------------------+
| Tipo de habitación  | Número de habitaciones  |
+---------------------+-------------------------+
| Tipo 4              | 13 habitaciones         |
+---------------------+-------------------------+
1 row in set (0.00 sec)

2023 E Q U I P O 11 (hostal);# 1.4
2023 E Q U I P O 11 (hostal);SELECT Año,Trimestre,COUNT(*) AS Total FROM (SELECT DATE_FORMAT(fecha_salida, '%y') AS Año, 
    ->     CASE 
    ->       WHEN MONTH(fecha_salida) BETWEEN 1 AND 3 THEN 'Primer trimestre'
    ->       WHEN MONTH(fecha_salida) BETWEEN 4 AND 6 THEN 'Segundo trimestre'
    ->       WHEN MONTH(fecha_salida) BETWEEN 7 AND 9 THEN 'Tercer trimestre'
    ->       ELSE 'Cuarto trimestre' END AS Trimestre FROM estancia) AS subconsulta
    -> WHERE Año IN (SELECT (DATE_FORMAT(fecha_salida, '%y')) FROM estancia) GROUP BY Año, Trimestre
    -> HAVING COUNT(*) > 3 ORDER BY Año DESC, CASE Trimestre 
    ->            WHEN 'Primer trimestre' THEN 1 
    ->            WHEN 'Segundo trimestre' THEN 2 
    ->            WHEN 'Tercer trimestre' THEN 3 
    ->            ELSE 4 
    ->          END ASC;#por Axel
+------+-------------------+-------+
| Año  | Trimestre         | Total |
+------+-------------------+-------+
| 17   | Tercer trimestre  |     4 |
| 16   | Primer trimestre  |    14 |
| 16   | Segundo trimestre |     9 |
| 16   | Tercer trimestre  |     9 |
| 16   | Cuarto trimestre  |     8 |
+------+-------------------+-------+
5 rows in set (0.00 sec)

2023 E Q U I P O 11 (hostal);#1.5
2023 E Q U I P O 11 (hostal);SELECT DATE_FORMAT(fecha_salida, '%y') AS 'Año', CASE 
    -> 	WHEN MONTH(fecha_salida) IN (1,2,3) THEN 'Primer trimestre'
    -> 	WHEN MONTH(fecha_salida) IN (4,5,6) THEN 'Segundo trimestre'
    -> 	WHEN MONTH(fecha_salida) IN (7,8,9) THEN 'Tercer trimestre'
    -> 	ELSE 'Cuarto trimestre'
    -> 	END AS 'Trimestre', COUNT(id_estancia) AS 'Total' 
    -> FROM estancia
    -> GROUP BY 1,2
    -> HAVING COUNT(id_estancia)>3
    -> ORDER BY 1 DESC, MONTH(fecha_salida);
+------+-------------------+-------+
| Año  | Trimestre         | Total |
+------+-------------------+-------+
| 17   | Tercer trimestre  |     4 |
| 16   | Primer trimestre  |    14 |
| 16   | Segundo trimestre |     9 |
| 16   | Tercer trimestre  |     9 |
| 16   | Cuarto trimestre  |     8 |
+------+-------------------+-------+
5 rows in set (0.00 sec)

2023 E Q U I P O 11 (hostal);
2023 E Q U I P O 11 (hostal);# Ejercicio 2
2023 E Q U I P O 11 (hostal);# 2.1
2023 E Q U I P O 11 (hostal);USE sakila;
Database changed
2023 E Q U I P O 11 (sakila);SELECT category_id, name 
    -> FROM category
    -> WHERE category_id IN
    -> 	(SELECT category_id 
    -> 	FROM film_category 
    -> 	GROUP BY 1
    -> 	HAVING COUNT(film_id) BETWEEN 65 AND 75
    -> 	)
    -> 	AND name!='Sports';#quitando el de deportes
+-------------+-------------+
| category_id | name        |
+-------------+-------------+
|           2 | Animation   |
|           6 | Documentary |
|           8 | Family      |
|           9 | Foreign     |
+-------------+-------------+
4 rows in set (0.00 sec)

2023 E Q U I P O 11 (sakila);# 2.2
2023 E Q U I P O 11 (sakila);SELECT YEAR(payment_date) AS 'Año', MONTHNAME(payment_date) AS 'Mes', AVG(amount) AS 'Pago promedio por renta de una película'
    -> FROM payment
    -> GROUP BY 1, 2
    -> HAVING AVG(amount)>
    -> 	(SELECT MIN(amount) 
    -> 	FROM payment
    -> 	)
    -> 	AND AVG(amount)<
    -> 	(SELECT AVG(amount)
    -> 	FROM payment
    -> 	)
    -> ORDER BY 1 DESC, MONTH(payment_date) DESC;
+------+----------+------------------------------------------+
| Año  | Mes      | Pago promedio por renta de una película  |
+------+----------+------------------------------------------+
| 2006 | February |                                 2.825165 |
| 2005 | June     |                                 4.166980 |
| 2005 | May      |                                 4.172526 |
+------+----------+------------------------------------------+
3 rows in set (0.03 sec)

2023 E Q U I P O 11 (sakila);# 2.3
2023 E Q U I P O 11 (sakila);SELECT postal_code, district
    -> FROM address 
    -> WHERE postal_code 
    -> LIKE '22%' AND LENGTH(postal_code)=5 AND (address2 IS NULL OR address2 LIKE '')
    -> ORDER BY 1;# address es no nula, por lo que basta con fijarse en address2
+-------------+------------------+
| postal_code | district         |
+-------------+------------------+
| 22025       | East Kasai       |
| 22173       | Irkutsk          |
| 22236       | West Java        |
| 22358       | al-Daqahliya     |
| 22372       | al-Sharqiya      |
| 22474       | Uttar Pradesh    |
| 22474       | Loja             |
| 22650       | Oyo & Osun       |
| 22813       | Shandong         |
| 22824       | Sisilia          |
| 22853       | Pays de la Loire |
| 22870       | Punjab           |
| 22954       | England          |
| 22971       | Sousse           |
+-------------+------------------+
14 rows in set (0.00 sec)

2023 E Q U I P O 11 (sakila);# 2.4
2023 E Q U I P O 11 (sakila);SELECT CONCAT(SUBSTRING(first_name, 1, 1),
    ->  LCASE(SUBSTRING(first_name, 2)),
    ->  ' ', SUBSTRING(last_name, 1, 1),
    ->  LCASE(SUBSTRING(last_name, 2))) AS 'nombre', 
    ->  LCASE(email) AS 'email' 
    -> FROM customer
    -> WHERE SUBSTRING(first_name, 1, 1) IN ('A','E','I','O','U') AND address_id IN 
    -> 	(SELECT address_id
    -> 	FROM address
    -> 	WHERE district NOT LIKE '% %' AND district NOT LIKE '' #unimos lo anterior
    -> 	)
    -> 	AND customer_id IN
    -> 	(SELECT customer_id
    -> 	FROM rental
    -> 	WHERE return_date IS NULL
    -> 	)
    -> ORDER BY 1;
+-------------------+--------------------------------------+
| nombre            | email                                |
+-------------------+--------------------------------------+
| Albert Crouse     | albert.crouse@sakilacustomer.org     |
| Alberto Henning   | alberto.henning@sakilacustomer.org   |
| Alicia Mills      | alicia.mills@sakilacustomer.org      |
| Allen Butterfield | allen.butterfield@sakilacustomer.org |
| Ana Bradley       | ana.bradley@sakilacustomer.org       |
| Andy Vanhorn      | andy.vanhorn@sakilacustomer.org      |
| Angela Hernandez  | angela.hernandez@sakilacustomer.org  |
| Anna Hill         | anna.hill@sakilacustomer.org         |
| Annette Olson     | annette.olson@sakilacustomer.org     |
| April Burns       | april.burns@sakilacustomer.org       |
| Edward Baugh      | edward.baugh@sakilacustomer.org      |
| Elizabeth Brown   | elizabeth.brown@sakilacustomer.org   |
| Elmer Noe         | elmer.noe@sakilacustomer.org         |
| Emily Diaz        | emily.diaz@sakilacustomer.org        |
| Ian Still         | ian.still@sakilacustomer.org         |
+-------------------+--------------------------------------+
15 rows in set (0.01 sec)

2023 E Q U I P O 11 (sakila);# 2.5
2023 E Q U I P O 11 (sakila);SELECT country AS 'Países de residencia de clientes cuyo gasto total es > 170 dólares'
    -> FROM country
    -> WHERE country_id IN
    -> 	(SELECT country_id
    -> 	FROM city
    -> 	WHERE city_id IN
    -> 		(SELECT city_id
    -> 		FROM address
    -> 		WHERE address_id IN
    -> 			(SELECT address_id
    -> 			FROM customer
    -> 			WHERE customer_id IN
    -> 				(SELECT customer_id
    -> 				FROM payment
    -> 				GROUP BY 1
    -> 				HAVING SUM(amount)>170
    -> 				)
    -> 			)
    -> 		)
    -> 	);
+----------------------------------------------------------------------+
| Países de residencia de clientes cuyo gasto total es > 170 dólares   |
+----------------------------------------------------------------------+
| Algeria                                                              |
| Belarus                                                              |
| Brazil                                                               |
| India                                                                |
| Iran                                                                 |
| Netherlands                                                          |
| Philippines                                                          |
| Réunion                                                              |
| Spain                                                                |
| United States                                                        |
+----------------------------------------------------------------------+
10 rows in set (0.02 sec)

2023 E Q U I P O 11 (sakila);
2023 E Q U I P O 11 (sakila);# Ejercicios extras
2023 E Q U I P O 11 (sakila);# 1
2023 E Q U I P O 11 (sakila);USE pixup;
Database changed
2023 E Q U I P O 11 (pixup);SELECT nombre AS 'disquera', LENGTH(nombre) AS 'num_caracteres', 
    -> 	ROUND((RAND(11) * (LENGTH(nombre) - 1)) + 1) AS 'num_random',
    -> 	CONCAT(SUBSTRING(nombre, 1, ROUND((RAND(11) * (LENGTH(nombre) - 1)) + 1)), '!', 
    -> 		SUBSTRING(nombre, ROUND((RAND(11) * (LENGTH(nombre) - 1)) + 1)+1, LENGTH(nombre))) AS 'resultado' 
    -> FROM disquera
    -> WHERE LENGTH(nombre)>
    -> 	(
    -> 	(SELECT AVG(LENGTH(nombre)) 
    -> 	FROM disquera)+
    -> 	(SELECT STDDEV(LENGTH(nombre)) 
    -> 	FROM disquera)
    -> 	);
+-----------------------------+----------------+------------+------------------------------+
| disquera                    | num_caracteres | num_random | resultado                    |
+-----------------------------+----------------+------------+------------------------------+
| Aftermath Entertainment     |             23 |         21 | Aftermath Entertainme!nt     |
| Def Jam Recording           |             18 |          7 | Def Jam! Recording           |
| Los no tan tristes          |             18 |          4 | Los !no tan tristes          |
| Nice Life Recording Company |             27 |         20 | Nice Life Recording !Company |
| Song Music Stories          |             18 |          3 | Son!g Music Stories          |
| Strange Fruit Records       |             21 |          9 | Strange F!ruit Records       |
| Universal Music Group       |             21 |         16 | Universal Music !Group       |
| Warner Music Group          |             18 |         10 | Warner Mus!ic Group          |
| MUSIC VIP ENTERTAINMENT     |             23 |          6 | MUSIC !VIP ENTERTAINMENT     |
| Top Dawg Entretainment      |             22 |         17 | Top Dawg Entretai!nment      |
+-----------------------------+----------------+------------+------------------------------+
10 rows in set (0.00 sec)

2023 E Q U I P O 11 (pixup);# 2
2023 E Q U I P O 11 (pixup);NOTEE
